1/
def count_vowels(sentence):
    # Define the set of vowels
    vowels = "aeiouAEIOU"
    # Initialize a counter for vowels
    count = 0

    # Loop through each character in the sentence
    for char in sentence:
        # Check if the character is a vowel
        if char in vowels:
            count += 1

    return count

# Take a sentence as input from the user
sentence = input("Enter a sentence: ")

# Call the function and print the number of vowels
print("Number of vowels in the sentence:", count_vowels(sentence))


2/

# Original list
numbers = [1, 3, 5, 7, 9]

# Create a new list with each element doubled
doubled_numbers = [num * 2 for num in numbers]

# Print the new list
print("Original list:", numbers)
print("Doubled list:", doubled_numbers)


3/

# Define the sets
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}

# Find the union of the sets
union_set = set1.union(set2)

# Find the intersection of the sets
intersection_set = set1.intersection(set2)

# Print the results
print("Union of set1 and set2:", union_set)
print("Intersection of set1 and set2:", intersection_set)


4/

# Original dictionary
original_dict = {'a': 1, 'b': 2, 'c': 3}

# Swap keys and values using a dictionary comprehension
swapped_dict = {value: key for key, value in original_dict.items()}

# Print the resulting dictionary
print("Original dictionary:", original_dict)
print("Swapped dictionary:", swapped_dict)

5/

# Original tuple
original_tuple = (5, 10, 15, 20)

# Convert the tuple to a list
temp_list = list(original_tuple)

# Change the second element (index 1) to 12
temp_list[1] = 12

# Convert the list back to a tuple
modified_tuple = tuple(temp_list)

# Print the modified tuple
print("Original tuple:", original_tuple)
print("Modified tuple:", modified_tuple)


6/

def is_palindrome(s):
    # Remove spaces and convert the string to lowercase for case-insensitive comparison
    s = s.replace(" ", "").lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Example usage
string = input("Enter a string: ")
if is_palindrome(string):
    print(f'"{string}" is a palindrome.')
else:
    print(f'"{string}" is not a palindrome.')


7/

def count_occurrences(numbers, target):

    occurrences = {}
    for number in numbers:
        if number in occurrences:
            occurrences[number] += 1
        else:
            occurrences[number] = 1

    if target in occurrences:
        occurrences["target_count"] = occurrences[target]

    return occurrences
numbers_list = [1, 2, 3, 4, 2, 3, 2, 1, 3, 5]
target_number = 2
result = count_occurrences(numbers_list, target_number)
print("Occurrences dictionary:", result)


8/
# Initialize variables
numbers = []
current_number = 1
total_sum = 0

# Generate numbers until the sum exceeds 200
while total_sum <= 200:
    numbers.append(current_number)  # Add the current number to the list
    total_sum += current_number     # Add the current number to the total sum
    current_number += 1             # Move to the next number

# Print the results
print("List of numbers:", numbers)
print("Total sum:", total_sum)
